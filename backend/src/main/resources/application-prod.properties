# Production Configuration

# Server Configuration
server.port=${PORT:8080}

# PostgreSQL Database Configuration
# Railway provides DATABASE_URL in format: postgresql://user:pass@host:port/db
# Spring Boot needs it as: jdbc:postgresql://host:port/db with separate username/password
# Parse DATABASE_URL and extract components
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://host.docker.internal:5432/skillsyncdb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.defer-datasource-initialization=true

# Connection pool settings for Railway
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# Initialize database with data
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data.sql
spring.sql.init.continue-on-error=true

# JWT Configuration
# Use JWT_SECRET environment variable, or fallback to default if not set
# For production, set JWT_SECRET in Railway environment variables for better security
app.jwt.secret=${JWT_SECRET:mySecretKeyForJWTTokenGenerationThatIsAtLeast256BitsLongForHS256Algorithm}
app.jwt.expiration=86400000

# OpenAI API Configuration
openai.api.key=${OPENAI_API_KEY:your-api-key-here}
openai.api.url=https://api.openai.com/v1/chat/completions
openai.model=gpt-3.5-turbo

# Logging
logging.level.com.skillsync=INFO
logging.level.org.springframework.security=WARN

# Disable H2 Console in production
spring.h2.console.enabled=false

# Actuator Configuration for Health Checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.health.db.enabled=true

# Force HTTPS for OAuth2 redirect URIs (Railway uses HTTPS)
server.forward-headers-strategy=framework
server.tomcat.remoteip.protocol-header=x-forwarded-proto
server.tomcat.remoteip.remote-ip-header=x-forwarded-for

# Frontend URL (Production)
app.frontend.url=${FRONTEND_URL:https://skill-sync-delta-amber.vercel.app}

# Google OAuth2 Configuration (Production)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=https://skillsync-backend-production-cf99.up.railway.app/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google
